<!DOCTYPE html>
<html>
<head>
	<title>Breakout Game</title>
</head>
<body>
	<canvas height="500" width="500" id="can" style="border: 5px solid #000000"> </canvas>


	<script type="text/javascript">
		var can = document.getElementById('can').getContext('2d');
		can.font = "18px Calibri";
		var WIDTH = 500;
		var HEIGHT = 500;
		var numOfTile, tileList, scores, intervalVar, running = false;
		can.fillText('Click me to start the game', 140, 250);



		var ball = {
			x:250,
			y:400,
			radius:5,
			color:'red',
			x_move_spd:3,
			y_move_spd:3
		};

		var base = {
			x:200,
			y:420,
			height:20,
			width:100,
			color:'black',
			pressingLeft:false,
			pressingRight:false,
			lives: 3
		};

		var tile = {
			height:20,
			width:40,
			color: 'orange'
		};


		document.getElementById('can').onmousedown = function(){
			if (!running) startGame();
		}
		document.onkeydown = function(event) {
			if (event.keyCode == 37){
				base.pressingLeft = true;
				base.pressingright = false;
			}

			else if (event.keyCode == 39){
				base.pressingRight = true;
				base.pressingLeft = false;
			}
		}

		document.onkeyup = function(event){
			if (event.keyCode == 37){
				base.pressingLeft = false;
			}
			else if (event.keyCode == 39){
				base.pressingRight = false;
			}
		}

		

		drawBall = function () {
			can.save();
			can.fillStyle = ball.color;
			can.beginPath();
			can.arc(ball.x, ball.y, ball.radius, 0, 2*Math.PI);
			can.fill();
			can.restore();
		}

		drawBase = function () {
			can.save();
			can.fillStyle = base.color;
			can.fillRect(base.x, base.y, base.width, base.height);
			can.restore();
		}

		drawTile = function (t, i) {
			can.save();
			can.fillStyle = tile.color;
			can.fillRect(t.x, t.y, tile.width, tile.height);
			can.restore();

		}

		updateBallPosition = function () {
			ball.x += ball.x_move_spd;
			ball.y += ball.y_move_spd;

			if (ball.x > WIDTH || ball.x < 0){
				ball.x_move_spd = - ball.x_move_spd;
			}

			if ( ball.y < 0){
				ball.y_move_spd = - ball.y_move_spd;
			}

			if(ball.y > HEIGHT){
				ball.y_move_spd = - ball.y_move_spd;
				base.lives--;
			}
		}

		updateBasePosition = function () {
			if (base.pressingLeft) {
				base.x = base.x - 5;
			}

			else if (base.pressingRight) {
				base.x = base.x + 5;
			}

			if (base.x < 0) {
				base.x = 0;
			}

			if (base.x > WIDTH - base.width){
				base.x = WIDTH - base.width;
			}
		}

		testCollision = function(base, ball) {
			return (
					(base.x < ball.x + ball.radius ) && 
					(ball.x < base.x + base.width) &&
					(base.y < ball.y + ball.radius) &&
					(ball.y < base.y + base.height));
		}

		testCollisionTile = function(ti, ball) {
			return (
					(ti.x < ball.x + ball.radius ) && 
					(ball.x < ti.x + tile.width) &&
					(ti.y < ball.y + ball.radius) &&
					(ball.y < ti.y + tile.height));
		}
	
		isGameOver = function(){
			if ((base.lives < 0) || (scores == 330)){
				clearInterval(intervalVar);
				can.fillText('Game is over, click to restart!', 140, 250);
			} 
			
		}

		update = function(){
			
			can.clearRect(0,0,WIDTH,HEIGHT);

			tileList.forEach(drawTile);
			drawBall();
			drawBase();

			if (testCollision(base, ball)){
				ball.y_move_spd = - ball.y_move_spd; 
			}

			for (key in tileList){
				if (testCollisionTile(tileList[key], ball)){	
					delete tileList[key];
					scores += 5;
					ball.y_move_spd = -ball.y_move_spd;
				}
			}

			can.fillText("Scores:" + scores, 5, 490);
			can.fillText("Lives:" + base.lives, 450, 490);
			updateBasePosition();
			updateBallPosition();
			isGameOver();
			
						
		}

		startGame = function () {
			// body...
			numOfTile = 0;
			scores = 0;
			tileList = [];
			tilex = 5;
			tiley = 5;
			running = true;
			// rows
			for(var i = 0; i <=6 ; i++){
				tilex = 5;
				// numbers of tiles of each row
				for (var j = 0; j <= 10; j++) {
					tileList[numOfTile] = {x: tilex, y: tiley};
					numOfTile++;
					tilex += 45;
				}
				tiley += 25;
			}
			
			intervalVar = setInterval(update,8);

		}

		//startGame();

	</script>
</body>
</html>
